{"version":3,"sources":["node_modules/@angular/common/fesm2022/http/testing.mjs"],"sourcesContent":["/**\n * @license Angular v20.2.4\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpHeaders, HttpResponse, HttpErrorResponse, HttpStatusCode, HttpEventType, HttpBackend, REQUESTS_CONTRIBUTE_TO_STABILITY, HttpClientModule } from '../module.mjs';\nimport 'rxjs/operators';\nimport '../xhr.mjs';\n\n/**\n * Controller to be injected into tests, that allows for mocking and flushing\n * of requests.\n *\n * @publicApi\n */\nclass HttpTestingController {\n}\n\n/**\n * A mock requests that was received and is ready to be answered.\n *\n * This interface allows access to the underlying `HttpRequest`, and allows\n * responding with `HttpEvent`s or `HttpErrorResponse`s.\n *\n * @publicApi\n */\nclass TestRequest {\n    request;\n    observer;\n    /**\n     * Whether the request was cancelled after it was sent.\n     */\n    get cancelled() {\n        return this._cancelled;\n    }\n    /**\n     * @internal set by `HttpClientTestingBackend`\n     */\n    _cancelled = false;\n    constructor(request, observer) {\n        this.request = request;\n        this.observer = observer;\n    }\n    /**\n     * Resolve the request by returning a body plus additional HTTP information (such as response\n     * headers) if provided.\n     * If the request specifies an expected body type, the body is converted into the requested type.\n     * Otherwise, the body is converted to `JSON` by default.\n     *\n     * Both successful and unsuccessful responses can be delivered via `flush()`.\n     */\n    flush(body, opts = {}) {\n        if (this.cancelled) {\n            throw new Error(`Cannot flush a cancelled request.`);\n        }\n        const url = this.request.urlWithParams;\n        const headers = opts.headers instanceof HttpHeaders ? opts.headers : new HttpHeaders(opts.headers);\n        body = _maybeConvertBody(this.request.responseType, body);\n        let statusText = opts.statusText;\n        let status = opts.status !== undefined ? opts.status : HttpStatusCode.Ok;\n        if (opts.status === undefined) {\n            if (body === null) {\n                status = HttpStatusCode.NoContent;\n                statusText ||= 'No Content';\n            }\n            else {\n                statusText ||= 'OK';\n            }\n        }\n        if (statusText === undefined) {\n            throw new Error('statusText is required when setting a custom status.');\n        }\n        if (status >= 200 && status < 300) {\n            this.observer.next(new HttpResponse({ body, headers, status, statusText, url }));\n            this.observer.complete();\n        }\n        else {\n            this.observer.error(new HttpErrorResponse({ error: body, headers, status, statusText, url }));\n        }\n    }\n    error(error, opts = {}) {\n        if (this.cancelled) {\n            throw new Error(`Cannot return an error for a cancelled request.`);\n        }\n        const headers = opts.headers instanceof HttpHeaders ? opts.headers : new HttpHeaders(opts.headers);\n        this.observer.error(new HttpErrorResponse({\n            error,\n            headers,\n            status: opts.status || 0,\n            statusText: opts.statusText || '',\n            url: this.request.urlWithParams,\n        }));\n    }\n    /**\n     * Deliver an arbitrary `HttpEvent` (such as a progress event) on the response stream for this\n     * request.\n     */\n    event(event) {\n        if (this.cancelled) {\n            throw new Error(`Cannot send events to a cancelled request.`);\n        }\n        this.observer.next(event);\n    }\n}\n/**\n * Helper function to convert a response body to an ArrayBuffer.\n */\nfunction _toArrayBufferBody(body) {\n    if (typeof ArrayBuffer === 'undefined') {\n        throw new Error('ArrayBuffer responses are not supported on this platform.');\n    }\n    if (body instanceof ArrayBuffer) {\n        return body;\n    }\n    throw new Error('Automatic conversion to ArrayBuffer is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to a Blob.\n */\nfunction _toBlob(body) {\n    if (typeof Blob === 'undefined') {\n        throw new Error('Blob responses are not supported on this platform.');\n    }\n    if (body instanceof Blob) {\n        return body;\n    }\n    if (ArrayBuffer && body instanceof ArrayBuffer) {\n        return new Blob([body]);\n    }\n    throw new Error('Automatic conversion to Blob is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to JSON data.\n */\nfunction _toJsonBody(body, format = 'JSON') {\n    if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n        throw new Error(`Automatic conversion to ${format} is not supported for ArrayBuffers.`);\n    }\n    if (typeof Blob !== 'undefined' && body instanceof Blob) {\n        throw new Error(`Automatic conversion to ${format} is not supported for Blobs.`);\n    }\n    if (typeof body === 'string' ||\n        typeof body === 'number' ||\n        typeof body === 'object' ||\n        typeof body === 'boolean' ||\n        Array.isArray(body)) {\n        return body;\n    }\n    throw new Error(`Automatic conversion to ${format} is not supported for response type.`);\n}\n/**\n * Helper function to convert a response body to a string.\n */\nfunction _toTextBody(body) {\n    if (typeof body === 'string') {\n        return body;\n    }\n    if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n        throw new Error('Automatic conversion to text is not supported for ArrayBuffers.');\n    }\n    if (typeof Blob !== 'undefined' && body instanceof Blob) {\n        throw new Error('Automatic conversion to text is not supported for Blobs.');\n    }\n    return JSON.stringify(_toJsonBody(body, 'text'));\n}\n/**\n * Convert a response body to the requested type.\n */\nfunction _maybeConvertBody(responseType, body) {\n    if (body === null) {\n        return null;\n    }\n    switch (responseType) {\n        case 'arraybuffer':\n            return _toArrayBufferBody(body);\n        case 'blob':\n            return _toBlob(body);\n        case 'json':\n            return _toJsonBody(body);\n        case 'text':\n            return _toTextBody(body);\n        default:\n            throw new Error(`Unsupported responseType: ${responseType}`);\n    }\n}\n\n/**\n * A testing backend for `HttpClient` which both acts as an `HttpBackend`\n * and as the `HttpTestingController`.\n *\n * `HttpClientTestingBackend` works by keeping a list of all open requests.\n * As requests come in, they're added to the list. Users can assert that specific\n * requests were made and then flush them. In the end, a verify() method asserts\n * that no unexpected requests were made.\n *\n *\n */\nclass HttpClientTestingBackend {\n    /**\n     * List of pending requests which have not yet been expected.\n     */\n    open = [];\n    /**\n     * Used when checking if we need to throw the NOT_USING_FETCH_BACKEND_IN_SSR error\n     */\n    isTestingBackend = true;\n    /**\n     * Handle an incoming request by queueing it in the list of open requests.\n     */\n    handle(req) {\n        return new Observable((observer) => {\n            const testReq = new TestRequest(req, observer);\n            this.open.push(testReq);\n            observer.next({ type: HttpEventType.Sent });\n            return () => {\n                testReq._cancelled = true;\n            };\n        });\n    }\n    /**\n     * Helper function to search for requests in the list of open requests.\n     */\n    _match(match) {\n        if (typeof match === 'string') {\n            return this.open.filter((testReq) => testReq.request.urlWithParams === match);\n        }\n        else if (typeof match === 'function') {\n            return this.open.filter((testReq) => match(testReq.request));\n        }\n        else {\n            return this.open.filter((testReq) => (!match.method || testReq.request.method === match.method.toUpperCase()) &&\n                (!match.url || testReq.request.urlWithParams === match.url));\n        }\n    }\n    /**\n     * Search for requests in the list of open requests, and return all that match\n     * without asserting anything about the number of matches.\n     */\n    match(match) {\n        const results = this._match(match);\n        results.forEach((result) => {\n            const index = this.open.indexOf(result);\n            if (index !== -1) {\n                this.open.splice(index, 1);\n            }\n        });\n        return results;\n    }\n    /**\n     * Expect that a single outstanding request matches the given matcher, and return\n     * it.\n     *\n     * Requests returned through this API will no longer be in the list of open requests,\n     * and thus will not match twice.\n     */\n    expectOne(match, description) {\n        description ||= this.descriptionFromMatcher(match);\n        const matches = this.match(match);\n        if (matches.length > 1) {\n            throw new Error(`Expected one matching request for criteria \"${description}\", found ${matches.length} requests.`);\n        }\n        if (matches.length === 0) {\n            let message = `Expected one matching request for criteria \"${description}\", found none.`;\n            if (this.open.length > 0) {\n                // Show the methods and URLs of open requests in the error, for convenience.\n                const requests = this.open.map(describeRequest).join(', ');\n                message += ` Requests received are: ${requests}.`;\n            }\n            throw new Error(message);\n        }\n        return matches[0];\n    }\n    /**\n     * Expect that no outstanding requests match the given matcher, and throw an error\n     * if any do.\n     */\n    expectNone(match, description) {\n        description ||= this.descriptionFromMatcher(match);\n        const matches = this.match(match);\n        if (matches.length > 0) {\n            throw new Error(`Expected zero matching requests for criteria \"${description}\", found ${matches.length}.`);\n        }\n    }\n    /**\n     * Validate that there are no outstanding requests.\n     */\n    verify(opts = {}) {\n        let open = this.open;\n        // It's possible that some requests may be cancelled, and this is expected.\n        // The user can ask to ignore open requests which have been cancelled.\n        if (opts.ignoreCancelled) {\n            open = open.filter((testReq) => !testReq.cancelled);\n        }\n        if (open.length > 0) {\n            // Show the methods and URLs of open requests in the error, for convenience.\n            const requests = open.map(describeRequest).join(', ');\n            throw new Error(`Expected no open requests, found ${open.length}: ${requests}`);\n        }\n    }\n    descriptionFromMatcher(matcher) {\n        if (typeof matcher === 'string') {\n            return `Match URL: ${matcher}`;\n        }\n        else if (typeof matcher === 'object') {\n            const method = matcher.method || '(any)';\n            const url = matcher.url || '(any)';\n            return `Match method: ${method}, URL: ${url}`;\n        }\n        else {\n            return `Match by function: ${matcher.name}`;\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-next.2\", ngImport: i0, type: HttpClientTestingBackend, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.2.0-next.2\", ngImport: i0, type: HttpClientTestingBackend });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-next.2\", ngImport: i0, type: HttpClientTestingBackend, decorators: [{\n            type: Injectable\n        }] });\nfunction describeRequest(testRequest) {\n    const url = testRequest.request.urlWithParams;\n    const method = testRequest.request.method;\n    return `${method} ${url}`;\n}\n\nfunction provideHttpClientTesting() {\n    return [\n        HttpClientTestingBackend,\n        { provide: HttpBackend, useExisting: HttpClientTestingBackend },\n        { provide: HttpTestingController, useExisting: HttpClientTestingBackend },\n        { provide: REQUESTS_CONTRIBUTE_TO_STABILITY, useValue: false },\n    ];\n}\n\n/**\n * Configures `HttpClientTestingBackend` as the `HttpBackend` used by `HttpClient`.\n *\n * Inject `HttpTestingController` to expect and flush requests in your tests.\n *\n * @publicApi\n *\n * @deprecated Add `provideHttpClientTesting()` to your providers instead.\n */\nclass HttpClientTestingModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-next.2\", ngImport: i0, type: HttpClientTestingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.2.0-next.2\", ngImport: i0, type: HttpClientTestingModule, imports: [HttpClientModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.2.0-next.2\", ngImport: i0, type: HttpClientTestingModule, providers: [provideHttpClientTesting()], imports: [HttpClientModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-next.2\", ngImport: i0, type: HttpClientTestingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [HttpClientModule],\n                    providers: [provideHttpClientTesting()],\n                }]\n        }] });\n\nexport { HttpClientTestingModule, HttpTestingController, TestRequest, provideHttpClientTesting };\n\n"],"mappings":"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","names":[],"x_google_ignoreList":[0]}