{
  "version": 3,
  "sources": ["src/app/services/todo.service.spec.ts"],
  "sourcesContent": ["import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { TodoService } from './todo.service';\nimport { TodoItem } from '../models/todo.model';\n\ndescribe('TodoService', () => {\n  let service: TodoService;\n  let httpMock: HttpTestingController;\n  const apiUrl = 'http://localhost:5000/api/todos';\n\n  const mockTodos: TodoItem[] = [\n    { id: 1, title: 'Test Todo 1', isCompleted: false, createdAt: '2023-01-01T00:00:00Z' },\n    { id: 2, title: 'Test Todo 2', isCompleted: true, createdAt: '2023-01-02T00:00:00Z' }\n  ];\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [TodoService]\n    });\n    service = TestBed.inject(TodoService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  describe('getTodos', () => {\n    it('should return an Observable<TodoItem[]>', () => {\n      service.getTodos().subscribe(todos => {\n        expect(todos.length).toBe(2);\n        expect(todos).toEqual(mockTodos);\n      });\n\n      const req = httpMock.expectOne(apiUrl);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockTodos);\n    });\n  });\n\n  describe('getTodo', () => {\n    it('should return an Observable<TodoItem>', () => {\n      const todoId = 1;\n      const mockTodo = mockTodos[0];\n\n      service.getTodo(todoId).subscribe(todo => {\n        expect(todo).toEqual(mockTodo);\n      });\n\n      const req = httpMock.expectOne(`${apiUrl}/${todoId}`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockTodo);\n    });\n  });\n\n  describe('createTodo', () => {\n    it('should create a new todo', () => {\n      const newTodo = { title: 'New Todo', isCompleted: false };\n      const createdTodo: TodoItem = { id: 3, ...newTodo, createdAt: '2023-01-03T00:00:00Z' };\n\n      service.createTodo(newTodo).subscribe(todo => {\n        expect(todo).toEqual(createdTodo);\n      });\n\n      const req = httpMock.expectOne(apiUrl);\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual(newTodo);\n      req.flush(createdTodo);\n    });\n  });\n\n  describe('updateTodo', () => {\n    it('should update an existing todo', () => {\n      const todoId = 1;\n      const updateData = { title: 'Updated Todo', isCompleted: true };\n      const updatedTodo: TodoItem = { id: todoId, ...updateData, createdAt: '2023-01-01T00:00:00Z' };\n\n      service.updateTodo(todoId, updateData).subscribe(todo => {\n        expect(todo).toEqual(updatedTodo);\n      });\n\n      const req = httpMock.expectOne(`${apiUrl}/${todoId}`);\n      expect(req.request.method).toBe('PUT');\n      expect(req.request.body).toEqual(updateData);\n      req.flush(updatedTodo);\n    });\n  });\n\n  describe('deleteTodo', () => {\n    it('should delete a todo', () => {\n      const todoId = 1;\n\n      service.deleteTodo(todoId).subscribe(response => {\n        expect(response).toBeNull();\n      });\n\n      const req = httpMock.expectOne(`${apiUrl}/${todoId}`);\n      expect(req.request.method).toBe('DELETE');\n      req.flush(null);\n    });\n  });\n});"],
  "mappings": "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",
  "names": ["init_testing"]
}
