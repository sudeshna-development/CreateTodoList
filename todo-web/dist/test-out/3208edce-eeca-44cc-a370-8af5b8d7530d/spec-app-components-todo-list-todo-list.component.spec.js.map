{
  "version": 3,
  "sources": ["src/app/components/todo-list/todo-list.component.spec.ts"],
  "sourcesContent": ["import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { FormsModule } from '@angular/forms';\nimport { of, throwError } from 'rxjs';\nimport { TodoListComponent } from './todo-list.component';\nimport { TodoService } from '../../services/todo.service';\nimport { TodoItem } from '../../models/todo.model';\n\ndescribe('TodoListComponent', () => {\n  let component: TodoListComponent;\n  let fixture: ComponentFixture<TodoListComponent>;\n  let todoServiceSpy: jasmine.SpyObj<TodoService>;\n\n  const mockTodos: TodoItem[] = [\n    { id: 1, title: 'Test Todo 1', isCompleted: false, createdAt: '2023-01-01T00:00:00Z' },\n    { id: 2, title: 'Test Todo 2', isCompleted: true, createdAt: '2023-01-02T00:00:00Z' }\n  ];\n\n  beforeEach(async () => {\n    const spy = jasmine.createSpyObj('TodoService', ['getTodos', 'createTodo', 'updateTodo', 'deleteTodo']);\n\n    await TestBed.configureTestingModule({\n      imports: [TodoListComponent, FormsModule],\n      providers: [\n        { provide: TodoService, useValue: spy }\n      ]\n    }).compileComponents();\n\n    fixture = TestBed.createComponent(TodoListComponent);\n    component = fixture.componentInstance;\n    todoServiceSpy = TestBed.inject(TodoService) as jasmine.SpyObj<TodoService>;\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  describe('ngOnInit', () => {\n    it('should load todos on initialization', () => {\n      todoServiceSpy.getTodos.and.returnValue(of(mockTodos));\n\n      component.ngOnInit();\n\n      expect(todoServiceSpy.getTodos).toHaveBeenCalled();\n      expect(component.todos).toEqual(mockTodos);\n      expect(component.isLoading).toBeFalse();\n    });\n\n    it('should handle error when loading todos', () => {\n      const consoleErrorSpy = spyOn(console, 'error');\n      todoServiceSpy.getTodos.and.returnValue(throwError(() => new Error('API Error')));\n\n      component.ngOnInit();\n\n      expect(todoServiceSpy.getTodos).toHaveBeenCalled();\n      expect(component.isLoading).toBeFalse();\n      expect(consoleErrorSpy).toHaveBeenCalledWith('Error loading todos:', jasmine.any(Error));\n    });\n  });\n\n  describe('addTodo', () => {\n    it('should add a new todo', () => {\n      const newTodo = { title: 'New Todo', isCompleted: false };\n      const createdTodo: TodoItem = { id: 3, ...newTodo, createdAt: '2023-01-03T00:00:00Z' };\n      \n      todoServiceSpy.createTodo.and.returnValue(of(createdTodo));\n      component.newTodoTitle = 'New Todo';\n\n      component.addTodo();\n\n      expect(todoServiceSpy.createTodo).toHaveBeenCalledWith(newTodo);\n      expect(component.todos).toContain(createdTodo);\n      expect(component.newTodoTitle).toBe('');\n    });\n\n    it('should not add empty todo', () => {\n      component.newTodoTitle = '   ';\n\n      component.addTodo();\n\n      expect(todoServiceSpy.createTodo).not.toHaveBeenCalled();\n    });\n\n    it('should handle error when creating todo', () => {\n      const consoleErrorSpy = spyOn(console, 'error');\n      todoServiceSpy.createTodo.and.returnValue(throwError(() => new Error('API Error')));\n      component.newTodoTitle = 'New Todo';\n\n      component.addTodo();\n\n      expect(consoleErrorSpy).toHaveBeenCalledWith('Error creating todo:', jasmine.any(Error));\n    });\n  });\n\n  describe('toggleTodo', () => {\n    it('should toggle todo completion status', () => {\n      const todo = mockTodos[0];\n      const updatedTodo = { ...todo, isCompleted: !todo.isCompleted };\n      todoServiceSpy.updateTodo.and.returnValue(of(updatedTodo));\n      component.todos = [...mockTodos];\n\n      component.toggleTodo(todo);\n\n      expect(todoServiceSpy.updateTodo).toHaveBeenCalledWith(todo.id, {\n        title: todo.title,\n        isCompleted: !todo.isCompleted\n      });\n      expect(component.todos[0]).toEqual(updatedTodo);\n    });\n\n    it('should handle error when toggling todo', () => {\n      const consoleErrorSpy = spyOn(console, 'error');\n      const todo = mockTodos[0];\n      todoServiceSpy.updateTodo.and.returnValue(throwError(() => new Error('API Error')));\n\n      component.toggleTodo(todo);\n\n      expect(consoleErrorSpy).toHaveBeenCalledWith('Error updating todo:', jasmine.any(Error));\n    });\n  });\n\n  describe('deleteTodo', () => {\n    it('should delete a todo', () => {\n      todoServiceSpy.deleteTodo.and.returnValue(of(undefined));\n      component.todos = [...mockTodos];\n\n      component.deleteTodo(1);\n\n      expect(todoServiceSpy.deleteTodo).toHaveBeenCalledWith(1);\n      expect(component.todos.length).toBe(1);\n      expect(component.todos.find(t => t.id === 1)).toBeUndefined();\n    });\n\n    it('should handle error when deleting todo', () => {\n      const consoleErrorSpy = spyOn(console, 'error');\n      todoServiceSpy.deleteTodo.and.returnValue(throwError(() => new Error('API Error')));\n\n      component.deleteTodo(1);\n\n      expect(consoleErrorSpy).toHaveBeenCalledWith('Error deleting todo:', jasmine.any(Error));\n    });\n  });\n\n  describe('editing functionality', () => {\n    it('should start edit mode', () => {\n      const todo = mockTodos[0];\n\n      component.startEdit(todo);\n\n      expect(component.editingTodoId).toBe(todo.id);\n      expect(component.editingTitle).toBe(todo.title);\n    });\n\n    it('should cancel edit mode', () => {\n      component.editingTodoId = 1;\n      component.editingTitle = 'Editing title';\n\n      component.cancelEdit();\n\n      expect(component.editingTodoId).toBeNull();\n      expect(component.editingTitle).toBe('');\n    });\n\n    it('should save edit', () => {\n      const todo = mockTodos[0];\n      const updatedTodo = { ...todo, title: 'Updated Title' };\n      todoServiceSpy.updateTodo.and.returnValue(of(updatedTodo));\n      component.todos = [...mockTodos];\n      component.editingTodoId = todo.id;\n      component.editingTitle = 'Updated Title';\n\n      component.saveEdit(todo);\n\n      expect(todoServiceSpy.updateTodo).toHaveBeenCalledWith(todo.id, {\n        title: 'Updated Title',\n        isCompleted: todo.isCompleted\n      });\n      expect(component.todos[0]).toEqual(updatedTodo);\n      expect(component.editingTodoId).toBeNull();\n      expect(component.editingTitle).toBe('');\n    });\n\n    it('should not save empty edit', () => {\n      const todo = mockTodos[0];\n      component.editingTitle = '   ';\n\n      component.saveEdit(todo);\n\n      expect(todoServiceSpy.updateTodo).not.toHaveBeenCalled();\n    });\n\n    it('should handle error when saving edit', () => {\n      const consoleErrorSpy = spyOn(console, 'error');\n      const todo = mockTodos[0];\n      todoServiceSpy.updateTodo.and.returnValue(throwError(() => new Error('API Error')));\n      component.editingTitle = 'Updated Title';\n\n      component.saveEdit(todo);\n\n      expect(consoleErrorSpy).toHaveBeenCalledWith('Error updating todo:', jasmine.any(Error));\n    });\n\n    it('should check if todo is being edited', () => {\n      component.editingTodoId = 1;\n\n      expect(component.isEditing(1)).toBeTrue();\n      expect(component.isEditing(2)).toBeFalse();\n    });\n  });\n});"],
  "mappings": "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",
  "names": []
}
